import React, { useEffect, useState, useCallback, useRef } from 'react';
import { keysApi } from '@/lib/api';
import { debounce } from '@/lib/utils';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { format } from 'date-fns';

type FirestoreTimestamp = {
  _seconds: number;
  _nanoseconds: number;
};

type TransactionTimestamp = string | number | FirestoreTimestamp;

interface Transaction {
  id: string;
  fromRole: string;
  toRole: string;
  action: string;
  reason?: string;
  timestamp: TransactionTimestamp;
  revoked?: boolean;
}

interface TransactionHistoryProps {
  filterRole?: string;
  className?: string;
  showRevoked?: boolean;
  showFilter?: boolean;
  onRefetch?: () => void;
}

const TransactionHistory: React.FC<TransactionHistoryProps> = ({
  filterRole = 'all',
  className = '',
  showRevoked = false,
  showFilter = true,
  onRefetch,
}) => {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [cursors, setCursors] = useState<string[]>([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [selectedRole, setSelectedRole] = useState<string>(filterRole);
  const prevOnRefetchRef = useRef<(() => any) | undefined>();

  // Helper function to parse timestamp from different formats
  const getTimestampMs = useCallback((ts: TransactionTimestamp): number => {
    if (!ts) return 0;
    if (typeof ts === 'object' && '_seconds' in ts) return ts._seconds * 1000;
    if (typeof ts === 'number') return ts < 1e12 ? ts * 1000 : ts;
    if (typeof ts === 'string') return new Date(ts).getTime();
    return 0;
  }, []);

  // Format timestamp for display
  const formatTimestamp = useCallback((timestamp: TransactionTimestamp): string => {
    try {
      const ms = getTimestampMs(timestamp);
      if (!ms) return 'N/A';
      const date = new Date(ms);
      return isNaN(date.getTime()) ? 'Invalid date' : format(date, 'MMM d, yyyy HH:mm:ss');
    } catch (err) {
      console.error('Error formatting timestamp:', err);
      return 'Invalid date';
    }
  }, [getTimestampMs]);

  // Fetch transactions with debouncing
  const fetchTransactions = useCallback(debounce(async (cursor?: string, direction: 'next' | 'prev' = 'next') => {
    try {
      setLoading(true);
      setError(null);
      
      const pageSize = 10;
      const response = await keysApi.getTransactions(cursor, pageSize, showRevoked);
      
      if (!response?.data?.transactions || !Array.isArray(response.data.transactions)) {
        throw new Error('Invalid response format from API');
      }
      
      setTransactions(response.data.transactions);
      setHasMore(!!response.data.hasMore);
      
      // Update cursor and page state
      if (direction === 'next' && cursor) {
        setCursors(prev => [...prev.slice(0, currentPage + 1), cursor]);
        setCurrentPage(prev => prev + 1);
      } else if (direction === 'prev') {
        setCurrentPage(prev => Math.max(0, prev - 1));
      }
    } catch (err) {
      console.error('Error fetching transactions:', err);
      setError('Failed to load transactions. Please try again.');
    } finally {
      setLoading(false);
    }
  }, 300), [currentPage, showRevoked]);

  // Initialize with the first page
  useEffect(() => {
    fetchTransactions();
  }, [fetchTransactions]);

  // Handle refetch when onRefetch changes
  useEffect(() => {
    if (onRefetch && prevOnRefetchRef.current !== onRefetch) {
      setCurrentPage(0);
      setCursors([]);
      fetchTransactions(undefined, 'next');
    }
    prevOnRefetchRef.current = onRefetch;
  }, [onRefetch, fetchTransactions]);

  // Handle filter changes
  useEffect(() => {
    console.log('Filter changed:', { selectedRole, showRevoked });
    setCurrentPage(0);
    setCursors([]);
    fetchTransactions(undefined, 'next');
  }, [selectedRole, showRevoked, fetchTransactions]);

  // Handle role changes
  const handleRoleChange = (value: string) => {
    setSelectedRole(value);
  };

  // Handle next page
  const handleNextPage = () => {
    if (!hasMore || loading) return;
    const lastTx = transactions[transactions.length - 1];
    if (lastTx) {
      const cursor = typeof lastTx.timestamp === 'object' 
        ? lastTx.timestamp._seconds.toString() 
        : new Date(lastTx.timestamp).getTime().toString();
      fetchTransactions(cursor, 'next');
    }
  };

  // Handle previous page
  const handlePrevPage = () => {
    if (currentPage <= 0 || loading) return;
    const prevCursor = cursors[currentPage - 1];
    fetchTransactions(prevCursor, 'prev');
  };

  // Filter and sort transactions
  const filteredTransactions = React.useMemo(() => {
    console.log('Filtering transactions:', { 
      total: transactions.length, 
      showRevoked, 
      selectedRole,
      transactions
    });
    
    let result = [...transactions];
    
    // Filter by role if needed
    if (selectedRole && selectedRole !== 'all') {
      result = result.filter(tx => 
        tx.fromRole === selectedRole || tx.toRole === selectedRole
      );
    }
    
    // Filter by revoked status if needed
    if (!showRevoked) {
      result = result.filter(tx => tx.action !== 'revoked');
    }
    
    // Sort by timestamp
    result.sort((a, b) => getTimestampMs(b.timestamp) - getTimestampMs(a.timestamp));
    
    return result;
  }, [transactions, showRevoked, selectedRole, getTimestampMs]);

  return (
    <div className={`space-y-4 ${className}`}>
      {showFilter && (
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">Transaction History</h3>
          <div className="w-48">
            <select
              value={selectedRole}
              onChange={(e) => handleRoleChange(e.target.value)}
              className="w-full rounded-md border border-slate-200 bg-white p-2 text-sm text-slate-700 shadow-sm transition-colors hover:border-slate-300 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-200 dark:hover:border-slate-600 dark:focus:border-blue-500 dark:focus:ring-blue-500"
            >
              <option value="all">All Roles</option>
              <option value="super_admin">Super Admin</option>
              <option value="super_distributor">Super Distributor</option>
              <option value="distributor">Distributor</option>
              <option value="retailer">Retailer</option>
            </select>
          </div>
        </div>
      )}
      {error && <div className="text-red-500 p-4">{error}</div>}

      <div className="overflow-hidden rounded-xl border border-slate-200 bg-white shadow-sm dark:border-slate-700 dark:bg-slate-800">
        <div className="overflow-hidden rounded-xl">
          <Table>
            <TableHeader className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-slate-800 dark:to-slate-900">
              <TableRow className="border-b border-slate-200 hover:bg-transparent dark:border-slate-800">
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">Transaction ID</TableHead>
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">From Role</TableHead>
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">To Role</TableHead>
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">Action</TableHead>
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">Reason</TableHead>
                <TableHead className="whitespace-nowrap px-4 py-3 font-medium text-slate-700 dark:text-slate-300">Timestamp</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody className="divide-y divide-slate-100 dark:divide-slate-800">
              {filteredTransactions.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="py-6 text-center text-slate-500 dark:text-slate-400">
                    {loading ? (
                      <div className="flex items-center justify-center space-x-2">
                        <div className="h-4 w-4 animate-spin rounded-full border-2 border-blue-500 border-t-transparent"></div>
                        <span>Loading transactions...</span>
                      </div>
                    ) : (
                      'No transactions found'
                    )}
                  </TableCell>
                </TableRow>
              ) : (
                filteredTransactions.map((transaction, idx) => (
                  <TableRow
                    key={transaction?.id || idx}
                    className={`${
                      transaction?.action === 'revoked'
                        ? 'bg-red-50/50 hover:bg-red-100/50 dark:bg-red-900/10 dark:hover:bg-red-900/20 border-l-4 border-l-red-400 dark:border-l-red-500'
                        : 'hover:bg-slate-50/80 dark:hover:bg-slate-700/50 border-l-4 border-l-transparent'
                    } transition-all duration-200`}
                  >
                    <TableCell className="whitespace-nowrap px-4 py-3 font-mono text-sm font-medium text-slate-900 dark:text-slate-100">
                      {transaction?.id ? `#${transaction.id.slice(0, 8)}...` : '-'}
                    </TableCell>
                    <TableCell className="text-slate-700 dark:text-slate-300">
                      <span className="font-medium">{transaction?.fromRole ?? '-'}</span>
                    </TableCell>
                    <TableCell className="text-slate-700 dark:text-slate-300">
                      <span className="font-medium">{transaction?.toRole ?? '-'}</span>
                    </TableCell>
                    <TableCell>
                      {transaction?.action === 'revoked' ? (
                        <span className="inline-flex items-center rounded-full bg-gradient-to-r from-red-100 to-rose-100 px-3 py-1 text-xs font-semibold text-red-700 dark:from-red-900/30 dark:to-rose-900/30 dark:text-red-400">
                          <span className="relative mr-1.5 flex h-2 w-2">
                            <span className="absolute inline-flex h-full w-full animate-ping rounded-full bg-red-400 opacity-75"></span>
                            <span className="relative inline-flex h-2 w-2 rounded-full bg-red-500"></span>
                          </span>
                          Revoked
                        </span>
                      ) : transaction?.action === 'credited' ? (
                        <span className="inline-flex items-center rounded-full bg-gradient-to-r from-green-100 to-emerald-100 px-3 py-1 text-xs font-semibold text-green-700 dark:from-green-900/30 dark:to-emerald-900/30 dark:text-green-400">
                          <span className="relative mr-1.5 flex h-2 w-2">
                            <span className="absolute inline-flex h-full w-full animate-ping rounded-full bg-green-400 opacity-75"></span>
                            <span className="relative inline-flex h-2 w-2 rounded-full bg-green-500"></span>
                          </span>
                          Credited
                        </span>
                      ) : (
                        <span className="rounded-full bg-slate-100 px-3 py-1 text-xs font-medium text-slate-700 dark:bg-slate-800 dark:text-slate-300">
                          {transaction?.action ?? '-'}
                        </span>
                      )}
                    </TableCell>
                    <TableCell className="text-slate-500 dark:text-slate-400">
                      {transaction?.reason ? (
                        <span className="max-w-[200px] truncate" title={transaction.reason}>
                          {transaction.reason}
                        </span>
                      ) : (
                        <span className="text-slate-300 dark:text-slate-600">-</span>
                      )}
                    </TableCell>
                    <TableCell className="whitespace-nowrap px-4 py-3 text-sm text-slate-600 dark:text-slate-300">
                      {transaction?.timestamp ? formatTimestamp(transaction.timestamp) : '-'}
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
      </div>

      <div className="flex justify-between items-center">
        <Button
          onClick={handlePrevPage}
          disabled={currentPage === 0 || loading}
          className="min-w-[100px]"
        >
          {loading ? 'Loading...' : 'Previous'}
        </Button>

        <div className="flex items-center space-x-4">
          <span className="text-gray-700 font-semibold">Page {currentPage + 1}</span>
          {loading && <span className="text-sm text-gray-500">Loading...</span>}
          <Button
            onClick={handleNextPage}
            disabled={!hasMore || loading}
            className="min-w-[100px]"
          >
            {loading ? 'Loading...' : hasMore ? 'Next' : 'No More'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default TransactionHistory;
